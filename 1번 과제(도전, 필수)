#include <iostream>
using namespace std;

//합계 함수
double getSum(int arr[], size_t arr_len) {          // 배열과 배열의 길이를 인자로 받음
    
    double sum = 0;                                 // sum 변수의 초기값을 0으로 초기화
    
    for (size_t i = 0; i < arr_len; i++) {          // 원소마다 값을 누적하여 sum에 저장
        sum += arr[i];
    }
    
    return sum;
}
// 평균 함수
double getAvg(int arr[], size_t arr_len) {          // 배열과 배열의 길이를 인자로 받음
    
    if (arr_len == 0) return 0.0;                   // 분모가 0일 경우, 계산할 수 없기 때문에 0.0 반환
    
    double sum = getSum(arr, arr_len);              // getSum에서 구한 합계를 배열의 길이로 나눠 평균 계산
    
    return sum / arr_len;                           // 합계를 배열의 길이로 나눠 return으로 반환
}

//버블 정렬 함수 : 인접한 두 수를 비교하여 위치를 바꿈
void sortArray(int arr[], size_t arr_len, int order) {              // 배열, 배열의 길이, 순서(1, 2)를 인자로 받음
    
    for (size_t i = 0; i < arr_len - 1; ++i) {                      // '배열의 길이-1' 만큼 반복하여 배열 전체를 반복적으로 확인
        
        for (size_t j = 0; j < arr_len - i - 1; ++j) {              // 인접한 두 원소를 비교하며 조건에 따라 순서를 바꾸기
                                                                    // 이미 정렬된 값은 다시 비교하지 않도록 'arr_len-i-1'

            bool shouldSwap = false;                                // bool 변수 추가하여 'true'면 순서 바꾸기

            // 오름차순
            if (order == 1 && arr[j] > arr[j + 1]) {                // order에서 '1'을 입력받고, 앞의 값이 뒤보다 크다면 순서 바꾸기
                
                shouldSwap = true;       
            }
            // 내림차순
            else if (order == 2 && arr[j] < arr[j + 1]) {           // order에서 '2'를 입력받고, 앞의 값이 뒤보다 작다면 순서 바꾸기
                
                shouldSwap = true;  
            }

            if (shouldSwap) {                       // 스왑이 발생한다면 아래 조건 실시

                int temp = arr[j];                  // 먼저 'temp'라는 임시변수를 만들어 현재 값(arr[j])을 저장

                arr[j] = arr[j + 1];                // arr[j+1] 값을 arr[j]로 복사(덮어쓰기)

                arr[j + 1] = temp;                  // arr[j+1] 값에는 'temp(=기존의 arr[j])'을 복사
            }
        }
    }
}

int main() {
    
    int n;

    
    cout << "몇 개의 정수를 입력하시겠습니까? ";
    cin >> n;

    if (n <= 0) {
        
        cout << "정수를 입력해주세요." << endl;          // 음수 입력시 프로그램 종료
        
        return 1;
    }

    int* arr = new int[n];          // 동적 배열 생성

    cout << n << "개의 정수를 입력하세요:\n";
    
    for (int i = 0; i < n; ++i) {
        
        cout << "숫자 " << i + 1 << ": ";
        
        cin >> arr[i];
    }

    int order;
    
    cout << "정렬 방식을 선택하세요 (1: 오름차순, 2: 내림차순): ";
    
    cin >> order;

    if (order != 1 && order != 2) {

        cout << "잘못된 입력입니다. 정렬하지 않습니다.\n";          // 1, 2가 아닌 숫자 입력시 정렬 없이 출력
    }
    else {
        sortArray(arr, n, order);

        
        cout << "정렬된 숫자들: ";
        
        for (int i = 0; i < n; ++i) {
            
            cout << arr[i];
            
            if (i < n - 1) cout << ", ";
        }

        cout << endl;
    }

    double sum = getSum(arr, n);
    double avg = getAvg(arr, n);

    cout << "합계: " << sum << endl;
    cout << "평균: " << avg << endl;

    delete[] arr; // 동적 메모리 해제
    
    return 0;
}
